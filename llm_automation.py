import pyautogui
import time
import base64
import os
from datetime import datetime
from io import BytesIO
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Ch·ªçn LLM provider (thay ƒë·ªïi theo nhu c·∫ßu)
USE_OPENAI = False  # False = d√πng Gemini
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')


def screenshot_to_base64():
    """Ch·ª•p m√†n h√¨nh v√† chuy·ªÉn th√†nh base64"""
    screenshot = pyautogui.screenshot()
    buffered = BytesIO()
    screenshot.save(buffered, format="PNG")
    return base64.b64encode(buffered.getvalue()).decode()


def ask_llm_openai(prompt, screenshot_b64):
    """G·ª≠i screenshot + prompt ƒë·∫øn OpenAI GPT-4o"""
    from openai import OpenAI
    
    client = OpenAI(api_key=OPENAI_API_KEY)
    
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": f"""B·∫°n l√† AI ƒëi·ªÅu khi·ªÉn m√°y t√≠nh. Ph√¢n t√≠ch screenshot v√† cho t√¥i c√°c l·ªánh PyAutoGUI.

Y√™u c·∫ßu: {prompt}

Tr·∫£ v·ªÅ JSON format:
{{
    "analysis": "M√¥ t·∫£ nh·ªØng g√¨ b·∫°n th·∫•y",
    "steps": [
        {{"action": "hotkey", "keys": ["win", "r"]}},
        {{"action": "write", "text": "notepad", "interval": 0.1}},
        {{"action": "press", "key": "enter"}},
        {{"action": "wait", "seconds": 1}},
        {{"action": "click", "x": 100, "y": 200}}
    ]
}}

Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng th√™m text n√†o kh√°c."""
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/png;base64,{screenshot_b64}"
                        }
                    }
                ]
            }
        ],
        max_tokens=1000
    )
    
    return response.choices[0].message.content


def ask_llm_gemini(prompt, screenshot_b64):
    """G·ª≠i screenshot + prompt ƒë·∫øn Google Gemini"""
    import google.generativeai as genai
    
    genai.configure(api_key=GOOGLE_API_KEY)
    model = genai.GenerativeModel('gemini-2.5-flash')
    
    # Decode base64 ƒë·ªÉ g·ª≠i cho Gemini
    import base64
    image_data = base64.b64decode(screenshot_b64)
    
    response = model.generate_content([
        f"""B·∫°n l√† AI ƒëi·ªÅu khi·ªÉn m√°y t√≠nh. Ph√¢n t√≠ch screenshot v√† cho t√¥i c√°c l·ªánh PyAutoGUI.

Y√™u c·∫ßu: {prompt}

Tr·∫£ v·ªÅ JSON format:
{{
    "analysis": "M√¥ t·∫£ nh·ªØng g√¨ b·∫°n th·∫•y",
    "steps": [
        {{"action": "hotkey", "keys": ["win", "r"]}},
        {{"action": "write", "text": "notepad", "interval": 0.1}},
        {{"action": "press", "key": "enter"}},
        {{"action": "wait", "seconds": 1}},
        {{"action": "click", "x": 100, "y": 200}}
    ]
}}

Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng th√™m text n√†o kh√°c.""",
        {"mime_type": "image/png", "data": image_data}
    ])
    
    return response.text


def execute_step(step):
    """Th·ª±c thi m·ªôt b∆∞·ªõc l·ªánh PyAutoGUI"""
    action = step.get('action')
    
    if action == 'hotkey':
        pyautogui.hotkey(*step['keys'])
        print(f"   ‚úì Nh·∫•n ph√≠m t·∫Øt: {' + '.join(step['keys'])}")
    
    elif action == 'write':
        pyautogui.write(step['text'], interval=step.get('interval', 0.05))
        print(f"   ‚úì G√µ: {step['text']}")
    
    elif action == 'press':
        pyautogui.press(step['key'])
        print(f"   ‚úì Nh·∫•n ph√≠m: {step['key']}")
    
    elif action == 'click':
        pyautogui.click(step['x'], step['y'])
        print(f"   ‚úì Click t·∫°i: ({step['x']}, {step['y']})")
    
    elif action == 'moveTo':
        pyautogui.moveTo(step['x'], step['y'], duration=step.get('duration', 0.5))
        print(f"   ‚úì Di chuy·ªÉn ƒë·∫øn: ({step['x']}, {step['y']})")
    
    elif action == 'wait':
        time.sleep(step['seconds'])
        print(f"   ‚è≥ Ch·ªù {step['seconds']}s")
    
    else:
        print(f"   ‚ö† Kh√¥ng hi·ªÉu action: {action}")


def run_automation(task_description, max_iterations=5):
    """Ch·∫°y automation v·ªõi LLM"""
    print(f"\n{'='*60}")
    print(f"TASK: {task_description}")
    print(f"{'='*60}\n")
    
    for iteration in range(max_iterations):
        print(f"\n--- Iteration {iteration + 1}/{max_iterations} ---")
        
        # 1. Ch·ª•p m√†n h√¨nh
        print("üì∏ Ch·ª•p m√†n h√¨nh...")
        screenshot_b64 = screenshot_to_base64()
        
        # 2. G·ª≠i ƒë·∫øn LLM
        print("ü§ñ H·ªèi LLM...")
        try:
            if USE_OPENAI:
                response = ask_llm_openai(task_description, screenshot_b64)
            else:
                response = ask_llm_gemini(task_description, screenshot_b64)
            
            print(f"üìù LLM response:\n{response}\n")
            
            # 3. Parse JSON
            import json
            # Lo·∫°i b·ªè markdown code block n·∫øu c√≥
            response = response.strip()
            if response.startswith('```'):
                response = response.split('```')[1]
                if response.startswith('json'):
                    response = response[4:]
            
            instructions = json.loads(response)
            
            print(f"üí≠ Analysis: {instructions['analysis']}\n")
            print("‚öôÔ∏è Executing steps...")
            
            # 4. Th·ª±c thi c√°c b∆∞·ªõc
            for step in instructions['steps']:
                execute_step(step)
                time.sleep(0.2)  # Delay nh·ªè gi·ªØa c√°c b∆∞·ªõc
            
            print("\n‚úÖ Ho√†n th√†nh iteration!")
            
            # 5. H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng
            cont = input("\nTi·∫øp t·ª•c? (y/n): ").strip().lower()
            if cont != 'y':
                print("üõë D·ª´ng automation.")
                break
                
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            break


# ============ MAIN ============

if __name__ == "__main__":
    print("=== AUTOMATION V·ªöI LLM TH·∫¨T ===\n")
    
    # Ki·ªÉm tra API key
    if USE_OPENAI:
        if not OPENAI_API_KEY:
            print("‚ùå Ch∆∞a c√≥ OPENAI_API_KEY trong .env")
            print("T·∫°o file .env v·ªõi n·ªôi dung:")
            print("OPENAI_API_KEY=sk-...")
            exit(1)
        print("‚úì D√πng OpenAI GPT-4o")
    else:
        if not GOOGLE_API_KEY:
            print("‚ùå Ch∆∞a c√≥ GEMINI_API_KEY trong .env")
            print("T·∫°o file .env v·ªõi n·ªôi dung:")
            print("GOOGLE_API_KEY=...")
            exit(1)
        print("‚úì D√πng Google Gemini")
    
    print("\nüöÄ B·∫Øt ƒë·∫ßu automation...")
    print("‚ö†Ô∏è  ƒê∆∞a chu·ªôt v√†o g√≥c m√†n h√¨nh ƒë·ªÉ d·ª´ng kh·∫©n c·∫•p!\n")
    time.sleep(2)
    
    # V√≠ d·ª• task
    run_automation("M·ªü Notepad v√† vi·∫øt 'Hello from LLM!'")